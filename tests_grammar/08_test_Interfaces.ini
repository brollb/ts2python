
[match:interface]
M1: """interface Message {
	       jsonrpc: string;
       }"""
M2: """interface RequestMessage extends Message {
            id: integer | string;
            method: string;
            params?: array | object;
        }"""
M3: """interface ProgressParams<T> {
            token: ProgressToken;
            value: T;
        }"""

M4: """export interface WorkspaceEdit {
        changes?: { [uri: DocumentUri]: TextEdit[]; };

        documentChanges?: (
            TextDocumentEdit[] |
            (TextDocumentEdit | CreateFile | RenameFile | DeleteFile)[]
        );

        changeAnnotations?: {
            [id: string /* ChangeAnnotationIdentifier */]: ChangeAnnotation;
        };
    }"""

M5: """export interface ParameterInformation {
        label: string | [uinteger, uinteger];
        documentation?: string | MarkupContent;
    }"""
M6: """interface Color {
        readonly red: decimal;
        readonly green: decimal;
        readonly blue: decimal;
        readonly alpha: decimal;
    }"""
M7: """export interface SemanticTokensRegistrationOptions extends
        TextDocumentRegistrationOptions, SemanticTokensOptions,
        StaticRegistrationOptions {
    }"""
M8: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;
		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""
M9: """interface SemanticTokensClientCapabilities {
		dynamicRegistration?: boolean;
		requests: {
			range?: boolean | {
			};
			full?: boolean | {
				delta?: boolean;
			};
		};
		tokenTypes: string[];
		tokenModifiers: string[];
		formats: TokenFormat[];
		overlappingTokenSupport?: boolean;
		multilineTokenSupport?: boolean;
    }"""
M10: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;

		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""
M11: """interface DidChangeConfigurationParams {
			settings: any;
		}"""
M12: """export interface CodeAction {
		title: string;
		kind?: CodeActionKind;
		diagnostics?: Diagnostic[];
		isPreferred?: boolean;
		disabled?: {
			reason: string;
		};
		edit?: WorkspaceEdit;
		command?: Command;
		data?: any;
	}"""
M13: """export interface TextDocument {
		readonly uri: Uri;
		readonly fileName: string;
		readonly isUntitled: boolean;
		readonly languageId: string;
		readonly version: number;
		readonly isDirty: boolean;
		readonly isClosed: boolean;
		save(): Thenable<boolean>;
		readonly eol: EndOfLine;
		readonly lineCount: number;
		lineAt(line: number): TextLine;
		lineAt(position: Position): TextLine;
		offsetAt(position: Position): number;
		positionAt(offset: number): Position;
		getText(range?: Range): string;
		getWordRangeAtPosition(position: Position, regex?: RegExp): Range | undefined;
		validateRange(range: Range): Range;
		validatePosition(position: Position): Position;
	}"""

[py:interface]
M7: """
    class SemanticTokensRegistrationOptions(TextDocumentRegistrationOptions, SemanticTokensOptions, StaticRegistrationOptions, TypedDict, total=True):
	    pass
    """
M9: """
	class SemanticTokensClientCapabilities(TypedDict, total=False):
	    class Requests_(TypedDict, total=False):
	        class Range_1(TypedDict, total=True):
	            pass
	        class Full_1(TypedDict, total=False):
	            delta: Optional[bool]
	        range: Union[bool, Range_1, None]
	        full: Union[bool, Full_1, None]
	    dynamicRegistration: Optional[bool]
	    requests: Requests_
	    tokenTypes: List[str]
	    tokenModifiers: List[str]
	    formats: List['TokenFormat']
	    overlappingTokenSupport: Optional[bool]
	    multilineTokenSupport: Optional[bool]
    """

[fail:interface]


[match:type_alias]
M1: """export type integer = number;"""
M2: """export type DiagnosticSeverity = 1 | 2 | 3 | 4;"""
M3: """export type ResourceOperationKind = 'create' | 'rename' | 'delete';"""
M4: """type MarkedString = string | { language: string; value: string };"""
M6: """export type TextDocumentContentChangeEvent = {
		range: Range;
		rangeLength?: uinteger;
		text: string;
	} | {
		text: string;
	};"""

[ast:type_alias]

[fail:type_alias]


[match:declarations_block]

[ast:declarations_block]

[fail:declarations_block]


[match:declaration]

[ast:declaration]

[fail:declaration]


[match:function]
M1: """lineAt(line: number): TextLine;"""
M2: """save(): Thenable<boolean>;"""
M3: """edit(callback: (editBuilder: TextEditorEdit) => void, options?: { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }): Thenable<boolean>;"""

[match:optional]

[ast:optional]

[fail:optional]
