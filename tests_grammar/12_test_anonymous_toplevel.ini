[config]
ts2python.RenderAnonymous = "toplevel"
ts2python.UseTypeUnion    = "True"

[match:interface]
M1: """interface InitializeResult {
		capabilities: ServerCapabilities;
		serverInfo?: {
			name: string;
			version?: string;
		};
	}"""
M2: """interface SemanticTokensClientCapabilities {
		dynamicRegistration?: boolean;
		requests: {
			range?: boolean | {
			};
			full?: boolean | {
				delta?: boolean;
			};
		};
		tokenTypes: string[];
		tokenModifiers: string[];
		formats: TokenFormat[];
		overlappingTokenSupport?: boolean;
		multilineTokenSupport?: boolean;
    }"""
M3: """export class Position {
		readonly line: number;
		readonly character: number;
		constructor(line: number, character: number);
		isBefore(other: Position): boolean;
		isBeforeOrEqual(other: Position): boolean;
		isAfter(other: Position): boolean;
		isAfterOrEqual(other: Position): boolean;
		isEqual(other: Position): boolean;
		compareTo(other: Position): number;
		translate(lineDelta?: number, characterDelta?: number): Position;
		translate(change: { lineDelta?: number; characterDelta?: number }): Position;
		with(line?: number, character?: number): Position;
		with(change: { line?: number; character?: number }): Position;
	}"""
M4: """export interface NotebookDocumentSyncOptions {
			notebookSelector: ({
				notebook: string | NotebookDocumentFilter;
				cells?: { language: string }[];
			} | {
				notebook?: string | NotebookDocumentFilter;
				cells: { language: string }[];
			})[];
			save?: boolean;
		}"""

[py:interface]
M1: """class InitializeResult_ServerInfo_0(TypedDict):
        name: str
        version: NotRequired[str]

    class InitializeResult(TypedDict):
        capabilities: 'ServerCapabilities'
        serverInfo: NotRequired[InitializeResult_ServerInfo_0]"""

M2: """class SemanticTokensClientCapabilities_Requests_0_Range_1(TypedDict):
        pass
    class SemanticTokensClientCapabilities_Requests_0_Full_1(TypedDict):
        delta: NotRequired[bool]
    class SemanticTokensClientCapabilities_Requests_0(TypedDict):
        range: NotRequired[bool | SemanticTokensClientCapabilities_Requests_0_Range_1]
        full: NotRequired[bool | SemanticTokensClientCapabilities_Requests_0_Full_1]

    class SemanticTokensClientCapabilities(TypedDict):
        dynamicRegistration: NotRequired[bool]
        requests: SemanticTokensClientCapabilities_Requests_0_Range_1
        tokenTypes: List[str]
        tokenModifiers: List[str]
        formats: List['TokenFormat']
        overlappingTokenSupport: NotRequired[bool]
        multilineTokenSupport: NotRequired[bool]"""

M3: """class Position_TranslateChange_0(TypedDict):
        lineDelta: NotRequired[float]
        characterDelta: NotRequired[float]
    class Position_With_Change_0(TypedDict):
        line: NotRequired[float]
        character: NotRequired[float]

    class Position:
        line: float
        character: float

        def isBefore(self, other: 'Position') -> bool:
            pass

        def isBeforeOrEqual(self, other: 'Position') -> bool:
            pass

        def isAfter(self, other: 'Position') -> bool:
            pass

        def isAfterOrEqual(self, other: 'Position') -> bool:
            pass

        def isEqual(self, other: 'Position') -> bool:
            pass

        def compareTo(self, other: 'Position') -> float:
            pass

        @singledispatchmethod
        def translate(self, arg1) -> 'Position':
            raise TypeError(f'First argument {arg1} of single-dispatch function/method {name} has illegal type {type(arg1)}')

        @translate.register
        def _(self, lineDelta: Optional[float] = None, characterDelta: Optional[float] = None) -> 'Position':
            pass

        @translate.register
        def _(self, change: Position_TranslateChange_0) -> 'Position':
            pass

        @singledispatchmethod
        def with_(self, arg1) -> 'Position':
            raise TypeError(f'First argument {arg1} of single-dispatch function/method {name} has illegal type {type(arg1)}')

        @with_.register
        def _(self, line: Optional[float] = None, character: Optional[float] = None) -> 'Position':
            pass

        @with_.register
        def _(self, change: Position_With_Change_0) -> 'Position':
            pass"""

M4: """class NotebookDocumentSyncOptions_NotebookSelector_0_Cells_0(TypedDict):
        language: str
    class NotebookDocumentSyncOptions_NotebookSelector_0(TypedDict):
        notebook: str | 'NotebookDocumentFilter'
        cells: NotRequired[List[NotebookDocumentSyncOptions_NotebookSelector_0_Cells_0]]
    class NotebookDocumentSyncOptions_NotebookSelector_1_Cells_0(TypedDict):
        language: str
    class NotebookDocumentSyncOptions_NotebookSelector_1(TypedDict):
        notebook: NotRequired[str | 'NotebookDocumentFilter']
        cells: List[NotebookDocumentSyncOptions_NotebookSelector_1_Cells_0]

    class NotebookDocumentSyncOptions(TypedDict):
        notebookSelector: List[NotebookDocumentSyncOptions_NotebookSelector_0_Cells_0 | NotebookDocumentSyncOptions_NotebookSelector_1_Cells_0]
        save: NotRequired[bool]"""

