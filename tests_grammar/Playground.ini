[config]
ts2python.RenderAnonymous = "toplevel"
ts2python.UseTypeUnion    = "True"

[match:interface]
M1: """interface InitializeResult {
		capabilities: ServerCapabilities;
		serverInfo?: {
			name: string;
			version?: string;
		};
	}"""
M2: """interface SemanticTokensClientCapabilities {
		dynamicRegistration?: boolean;
		requests: {
			range?: boolean | {
			};
			full?: boolean | {
				delta?: boolean;
			};
		};
		tokenTypes: string[];
		tokenModifiers: string[];
		formats: TokenFormat[];
		overlappingTokenSupport?: boolean;
		multilineTokenSupport?: boolean;
    }"""
M3: """export class Position {
		readonly line: number;
		readonly character: number;
		constructor(line: number, character: number);
		isBefore(other: Position): boolean;
		isBeforeOrEqual(other: Position): boolean;
		isAfter(other: Position): boolean;
		isAfterOrEqual(other: Position): boolean;
		isEqual(other: Position): boolean;
		compareTo(other: Position): number;
		translate(lineDelta?: number, characterDelta?: number): Position;
		translate(change: { lineDelta?: number; characterDelta?: number }): Position;
		with(line?: number, character?: number): Position;
		with(change: { line?: number; character?: number }): Position;
	}"""
M4: """export interface NotebookDocumentSyncOptions {
			notebookSelector: ({
				notebook: string | NotebookDocumentFilter;
				cells?: { language: string }[];
			} | {
				notebook?: string | NotebookDocumentFilter;
				cells: { language: string }[];
			})[];
			save?: boolean;
		}"""
