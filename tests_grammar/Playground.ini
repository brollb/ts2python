[config]
ts2python.RenderAnonymous = "toplevel"
ts2python.UseTypeUnion    = "True"
ts2python.UseTypeParameters = "False"

;[match:interface]
;M9: """interface SemanticTokensClientCapabilities {
;		dynamicRegistration?: boolean;
;		requests: {
;			range?: boolean | {
;			};
;			full?: boolean | {
;				delta?: boolean;
;			};
;		};
;		tokenTypes: string[];
;		tokenModifiers: string[];
;		formats: TokenFormat[];
;		overlappingTokenSupport?: boolean;
;		multilineTokenSupport?: boolean;
;    }"""
;
;[py:interface]
;
;M9: """
;	class SemanticTokensClientCapabilities(TypedDict):
;	    class Requests_0(TypedDict):
;	        class Range_1(TypedDict):
;	            pass
;	        class Full_1(TypedDict):
;	            delta: NotRequired[bool]
;	        range: NotRequired[Union[bool, Range_1]]
;	        full: NotRequired[Union[bool, Full_1]]
;	    dynamicRegistration: NotRequired[bool]
;	    requests: Requests_0
;	    tokenTypes: List[str]
;	    tokenModifiers: List[str]
;	    formats: List['TokenFormat']
;	    overlappingTokenSupport: NotRequired[bool]
;	    multilineTokenSupport: NotRequired[bool]
;    """

[match:interface]
M0: """export interface Event<T> {
	    (listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;
	}"""
M1: """export class EventEmitter<T> {
		event: Event<T>;
		fire(data: T): void;
		dispose(): void;
	}"""

[match:namespace]
M2: """export namespace window {
		export let activeTextEditor: TextEditor | undefined;
		export let visibleTextEditors: readonly TextEditor[];
		export const onDidChangeActiveTextEditor: Event<TextEditor | undefined>;
		export const onDidChangeVisibleTextEditors: Event<readonly TextEditor[]>;
		export const onDidChangeTextEditorSelection: Event<TextEditorSelectionChangeEvent>;
		export const onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;
		export const onDidChangeTextEditorOptions: Event<TextEditorOptionsChangeEvent>;
		export const onDidChangeTextEditorViewColumn: Event<TextEditorViewColumnChangeEvent>;
		export const terminals: readonly Terminal[];
		export const activeTerminal: Terminal | undefined;
		export const onDidChangeActiveTerminal: Event<Terminal | undefined>;
		export const onDidOpenTerminal: Event<Terminal>;
		export const onDidCloseTerminal: Event<Terminal>;
		export const onDidChangeTerminalState: Event<Terminal>;
		export const state: WindowState;
		export const onDidChangeWindowState: Event<WindowState>;
		export function showTextDocument(document: TextDocument, column?: ViewColumn, preserveFocus?: boolean): Thenable<TextEditor>;
		export function showTextDocument(document: TextDocument, options?: TextDocumentShowOptions): Thenable<TextEditor>;
		export function showTextDocument(uri: Uri, options?: TextDocumentShowOptions): Thenable<TextEditor>;
		export function createTextEditorDecorationType(options: DecorationRenderOptions): TextEditorDecorationType;
		export function showInformationMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showInformationMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showInformationMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showInformationMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showWarningMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showWarningMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showWarningMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showWarningMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showErrorMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showErrorMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showErrorMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;
		export function showErrorMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;
		export function showQuickPick(items: readonly string[] | Thenable<readonly string[]>, options: QuickPickOptions & { canPickMany: true }, token?: CancellationToken): Thenable<string[] | undefined>;
		export function showQuickPick(items: readonly string[] | Thenable<readonly string[]>, options?: QuickPickOptions, token?: CancellationToken): Thenable<string | undefined>;
		export function showQuickPick<T extends QuickPickItem>(items: readonly T[] | Thenable<readonly T[]>, options: QuickPickOptions & { canPickMany: true }, token?: CancellationToken): Thenable<T[] | undefined>;
		export function showQuickPick<T extends QuickPickItem>(items: readonly T[] | Thenable<readonly T[]>, options?: QuickPickOptions, token?: CancellationToken): Thenable<T | undefined>;
		export function showWorkspaceFolderPick(options?: WorkspaceFolderPickOptions): Thenable<WorkspaceFolder | undefined>;
		export function showOpenDialog(options?: OpenDialogOptions): Thenable<Uri[] | undefined>;
		export function showSaveDialog(options?: SaveDialogOptions): Thenable<Uri | undefined>;
		export function showInputBox(options?: InputBoxOptions, token?: CancellationToken): Thenable<string | undefined>;
		export function createQuickPick<T extends QuickPickItem>(): QuickPick<T>;
		export function createInputBox(): InputBox;
		export function createOutputChannel(name: string): OutputChannel;
		export function createWebviewPanel(viewType: string, title: string, showOptions: ViewColumn | { viewColumn: ViewColumn; preserveFocus?: boolean }, options?: WebviewPanelOptions & WebviewOptions): WebviewPanel;
		export function setStatusBarMessage(text: string, hideAfterTimeout: number): Disposable;
		export function setStatusBarMessage(text: string, hideWhenDone: Thenable<any>): Disposable;
		export function setStatusBarMessage(text: string): Disposable;
		export function withScmProgress<R>(task: (progress: Progress<number>) => Thenable<R>): Thenable<R>;
		export function withProgress<R>(options: ProgressOptions, task: (progress: Progress<{ message?: string; increment?: number }>, token: CancellationToken) => Thenable<R>): Thenable<R>;
		export function createStatusBarItem(alignment?: StatusBarAlignment, priority?: number): StatusBarItem;
		export function createStatusBarItem(id: string, alignment?: StatusBarAlignment, priority?: number): StatusBarItem;
		export function createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): Terminal;
		export function createTerminal(options: TerminalOptions): Terminal;
		export function createTerminal(options: ExtensionTerminalOptions): Terminal;
		export function registerTreeDataProvider<T>(viewId: string, treeDataProvider: TreeDataProvider<T>): Disposable;
		export function createTreeView<T>(viewId: string, options: TreeViewOptions<T>): TreeView<T>;
		export function registerUriHandler(handler: UriHandler): Disposable;
		export function registerWebviewPanelSerializer(viewType: string, serializer: WebviewPanelSerializer): Disposable;
		export function registerWebviewViewProvider(viewId: string, provider: WebviewViewProvider, options?: {
			readonly webviewOptions?: {
				readonly retainContextWhenHidden?: boolean;
			};
		}): Disposable;
		export function registerCustomEditorProvider(viewType: string, provider: CustomTextEditorProvider | CustomReadonlyEditorProvider | CustomEditorProvider, options?: {
			readonly webviewOptions?: WebviewPanelOptions;
			readonly supportsMultipleEditorsPerDocument?: boolean;
		}): Disposable;
		export function registerTerminalLinkProvider(provider: TerminalLinkProvider): Disposable;
		export function registerTerminalProfileProvider(id: string, provider: TerminalProfileProvider): Disposable;
		export function registerFileDecorationProvider(provider: FileDecorationProvider): Disposable;
		export let activeColorTheme: ColorTheme;
		export const onDidChangeActiveColorTheme: Event<ColorTheme>;
	}"""