[match:declaration]
M1: """hoverMessage?: MarkdownString | MarkedString | Array<MarkdownString | MarkedString>"""

[match:interface]
M1: """export interface LanguageConfiguration {
		comments?: CommentRule;
		brackets?: CharacterPair[];
		wordPattern?: RegExp;
		indentationRules?: IndentationRule;
		onEnterRules?: OnEnterRule[];
		__electricCharacterSupport?: {
			brackets?: any;
			docComment?: {
				scope: string;
				open: string;
				lineStart: string;
				close?: string;
			};
		};
		__characterPairSupport?: {
			autoClosingPairs: {
				open: string;
				close: string;
				notIn?: string[];
			}[];
		};
	}"""
M2: """export interface NotebookController {
		readonly id: string;
		readonly notebookType: string;
		supportedLanguages?: string[];
		label: string;
		description?: string;
		detail?: string;
		supportsExecutionOrder?: boolean;
		createNotebookCellExecution(cell: NotebookCell): NotebookCellExecution;
		executeHandler: (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>;
		interruptHandler?: (notebook: NotebookDocument) => void | Thenable<void>;
		readonly onDidChangeSelectedNotebooks: Event<{ notebook: NotebookDocument; selected: boolean }>;
		updateNotebookAffinity(notebook: NotebookDocument, affinity: NotebookControllerAffinity): void;
		dispose(): void;
	}"""
M3:  """export interface CancellationToken {
		isCancellationRequested: boolean;
		onCancellationRequested: Event<any>;
	}"""
M4: """export class CancellationError extends Error {
		constructor();
	}"""
M5: """export interface FileSystemWatcher extends Disposable {
		ignoreCreateEvents: boolean;
		ignoreChangeEvents: boolean;
		ignoreDeleteEvents: boolean;
		onDidCreate: Event<Uri>;
		onDidChange: Event<Uri>;
		onDidDelete: Event<Uri>;
	}"""